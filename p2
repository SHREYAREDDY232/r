
#Program 2

install.packages("ggplot2")
library(ggplot2)
data(mpg)
mpg

#i. Visualize the distribution of city mpg
# Histogram of City MPG
hist(mpg$cty, main = "Distribution of City MPG", xlab = "City MPG")

 #ii. Show the counts of each car type:
# Bar Plot of Car Types
barplot(table(mpg$class), main = "Counts of Each Car Type", xlab = "Car Type")

#iii. Visualize the relationship between displacement and highway mpg:
# Scatter Plot of Displacement vs. Highway MPG
plot(mpg$displ, mpg$hwy, main = "Displacement vs. Highway MPG", xlab = "Displacement",ylab="Highway")

#iv. Display the distribution of engine cylinder counts:
# Box Plot of Cylinder Counts
boxplot(mpg$cyl, main = "Distribution of Engine Cylinder Counts", ylab = "Cylinder")

#v. Subset the dataset to include cars manufactured by Toyota:
# Subset for Toyota Cars
toyota_cars <- subset(mpg, manufacturer == "toyota")
toyota_cars

#vi. Find cars with a city mpg greater than 20 and highway mpg greater than 30:
# Subset for High Mileage Cars
high_mileage_cars <- subset(mpg, cty > 20 & hwy > 30)
high_mileage_cars

#vii. Create a new column "mileage_difference" as the difference between city mpg a
# Create Mileage Difference Column
mpg$mileage_difference <- mpg$cty - mpg$hwy
mpg$mileage_difference

#viii. Calculate the average city mpg for each car class and sort them in descendin
# Average City MPG by Car Class
avg_city_mpg <- aggregate(cty ~ class, data = mpg, FUN = mean)
avg_city_mpg_sorted <- avg_city_mpg[order(avg_city_mpg$cty, decreasing = TRUE), ]
avg_city_mpg_sorted

#ix. Group the data by transmission type and calculate the median engine displaceme
# Median Displacement by Transmission Type
median_displacement <- aggregate(displ ~ trans, data = mpg, FUN = median)

#x. Investigate if there is a trend between model year and city mpg:
# Scatter Plot of Model Year vs. City MPG
plot(mpg$year, mpg$cty, main = "Model Year vs. City MPG", xlab = "Model Year", ylab="City")

#xi. Detect and list the cars with exceptionally high highway mpg values (potential
# Identify Outliers (e.g., highway mpg > 40)
outliers <- subset(mpg, hwy > 40)
outliers


# In[ ]:


airlines <- read.csv("D:/NMIT/AEC R Programming/airlines.csv")
airlines

#i Find descriptive statistics for all columns
summary(airlines)

#ii. Plot the distribution of numerical columns
# Specify numerical columns
numerical_columns <- c("Flight", "DayOfWeek", "Time", "Length", "Delay")
# Create histograms for each numerical column
for (column in numerical_columns) {
# Create a histogram with density plot (kde)
hist_data <- airlines[[column]]
hist_density <- density(hist_data)
# Plot the histogram
hist_obj <- hist(hist_data, main = paste("Distribution of", column), xlab = colum
# Add a density plot (kde)
lines(hist_density, col = "blue", lwd = 2)
# Add labels
xlabel <- paste(column, "(Value)")
ylabel <- "Frequency"
title <- paste("Distribution of", column)
legend("topright", legend = "KDE", col = "blue", lwd = 2)
# Customize labels and titles
xlabel <- paste(column, "(Value)")
ylabel <- "Frequency"
title <- paste("Distribution of", column)
# Add labels and title
xlabel <- paste(column, "(Value)")
ylabel <- "Frequency"
title <- paste("Distribution of", column)
title(main = title, xlab = xlabel, ylab = ylabel)
}
                 
#iii. Plot the distribution of numerical columns
# Load the ggplot2 library
library(ggplot2)
# Define your categorical columns
categorical_columns <- c("Airline", "AirportFrom", "AirportTo")
# Loop through each categorical column
for (column in categorical_columns) {
# Create a ggplot object
plot <- ggplot(data = airlines, aes_string(x = column)) +
geom_bar() + # Create a bar plot
labs(x = column, y = "Count", title = paste("Counts of", column)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Rotate x-axis label
# Print the plot
print(plot)
}                 

 # iv. Find and plot the top 5 airlines with maximum delay
library(dplyr)
library(ggplot2)
# Assuming your dataset is named 'df'
# Group by 'Airline' and calculate the sum of 'Delay', then arrange in descending o
top_airlines <- airlines %>%
group_by(Airline) %>%
summarize(Delay = sum(Delay)) %>%
arrange(desc(Delay)) %>%
head(5)
# Create a bar plot
ggplot(top_airlines, aes(x = reorder(Airline, -Delay), y = Delay)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Airline", y = "Delay", title = "Top 5 Airlines with Maximum Delay") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip() # To make the bars horizontal
                 
# v. Plot the distribution of time of delay and no delay(bivariate). Write the infe
# Create a new column 'Delay_Status' with values "Delay" or "No Delay"
airlines$Delay_Status <- ifelse(airlines$Delay == 1, "Delay", "No Delay")
# Load the ggplot2 package if not already loaded
library(ggplot2)
# Create a boxplot
ggplot(airlines, aes(x = Delay_Status, y = Time)) +
geom_boxplot() +
labs(x = "Delay Status", y = "Time", title = "Distribution of Time for Delay")
                 
#vi.Plot the distribution of length of delay and no delay(bivariate)
# Load the ggplot2 package if not already loaded
library(ggplot2)
# Create a boxplot
ggplot(airlines, aes(x = as.factor(Delay), y = Length)) +
geom_boxplot() +
labs(x = "Delay", y = "Length", title = "Distribution of Length for Delay ")
                 
#vii. Determine the distribution of flight counts for each airport of arrival (Airp
# Load the necessary libraries
library(dplyr)
library(ggplot2)
# Group the data by AirportTo and calculate the flight counts
flight_counts <- airlines %>%
group_by(AirportTo) %>%
summarise(Flight_Count = n())
# Create a bar plot to visualize the distribution of flight counts
ggplot(flight_counts, aes(x = reorder(AirportTo, -Flight_Count), y = Flight_Count))
geom_bar(stat = "identity", fill = "lightblue", color = "black") +
labs(title = "Distribution of Flight Counts by Airport of Arrival", x = "Airport")
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave("Flight_Counts_by_AirportTo.png") 
                 
                 


# In[ ]:

